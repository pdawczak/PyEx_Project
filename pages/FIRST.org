* Elixir <3 Python #1: Getting started

** Project's setup

*** Preparing the environment

We will need to install some Python libraries, so it is advised to create a
dedicated Python's environment, so the dependencies don't get in conflicts with
each other.

One of the tools used in Python world is ~virtualenv~.

Let's give it a go:

#+BEGIN_SRC sh
$ virtualenv pyex_env
Using base prefix ...
New python executable in ...
Installing ... done.
#+END_SRC

and activate it:

#+BEGIN_SRC sh
$ source pyex_env/bin/activate
(pyex_env)
#+END_SRC

*** Python dependencies

Clone the ~Pyrlang~ repository:

#+BEGIN_SRC sh
$ git clone git@github.com:Pyrlang/Pyrlang.git
#+END_SRC

There are additional requirements needed for ~Pyrlang~ to work, and it provides a
convenience script to installing them.

Let's invoke it:

#+BEGIN_SRC sh
$ pip3 install -r Pyrlang/requirements.txt
#+END_SRC

This completes the local setup and we are able to go to the next step, and build
a small app in Python.

** First Python app

Firstly - required imports:

#+BEGIN_SRC python
# ./py_app/first.py
from pyrlang import Node, GeventEngine
from term import Atom
#+END_SRC

Next, the body of the app:

#+BEGIN_SRC python
# ./py_app/first.py
def main():
    eng = GeventEngine()
    node = Node(node_name="py@127.0.0.1", cookie="PYEX", engine=eng)

    pid = node.register_new_process()

    node.send(sender=pid,
              receiver=(Atom("ex@127.0.0.1"), Atom("iex")),
              message=Atom("Hello from Python!"))

    eng.run_forever()
#+END_SRC

At the time of writing, ~Pyrlang~ allows specifying only a full name of a node.
The code above:

#+BEGIN_SRC python
Node(node_name="py@127.0.0.1", cookie="PYEX", engine=eng)
#+END_SRC

would be an equivalent of starting ~iex~ like:

#+BEGIN_SRC sh
$ iex --name "py@127.0.0.1" --cookie "PYEX"
#+END_SRC

and:

#+BEGIN_SRC python
node.send(sender=pid,
          receiver=(Atom("ex@127.0.0.1"), Atom("iex")),
          message=Atom("Hello from Python!"))
#+END_SRC

would be an equivalent of Elixir's code:

#+BEGIN_SRC elixir
send({:iex, :"ex@127.0.0.1"}, :"Hello from Python!")
#+END_SRC

Let's finish Python's script with:

#+BEGIN_SRC python
# ./py_app/first.py
if __name__ == "__main__":
    main()
#+END_SRC

This construct will invoke ~main()~ method automatically when executing this
Python script.

** Starting Elixir node

The above code assumes a node named ~ex@127.0.0.1~ that will be using cookie
~PYEX~, and a process within this node named ~:iex~.

Let's setup such a node:

#+BEGIN_SRC sh
$ iex --name ex@127.0.0.1 --cookie PYEX
#+END_SRC

and register the process:

#+BEGIN_SRC elixir
iex(ex@127.0.0.1)1> Process.register(self(), :iex)
true
#+END_SRC

** Starting Python node

Due to the fact we've checkedout ~Pyrlang~'s source code, Python will be unable
to find the code, and as such, we have to help it a little bit specifying the
~PYTHONPATH~; additionally, for easier debugging, we will enable more granular
logging.

The full command would be as follows:

#+BEGIN_SRC sh
$ PYTHONPATH=./Pyrlang PYRLANG_ENABLE_LOG_FORMAT=1 PYRLANG_LOG_LEVEL=DEBUG python3 py_app/first.py
#+END_SRC

This is quite verbose, and difficult to remember. Let's add ~Makefile~ that will
handle this for us:

#+BEGIN_SRC makefile
# Makefile
PYPATH_SET=PYTHONPATH=./Pyrlang
PY=$(PYPATH_SET) PYRLANG_ENABLE_LOG_FORMAT=1 PYRLANG_LOG_LEVEL=DEBUG python3

.PHONY: start_first_python
start_first_python:
	$(PY) py_app/first.py
#+END_SRC

and invoke it:

#+BEGIN_SRC sh
$ make start_first_python
Native term ETF codec library import failed, falling back to slower Python impl
2018-11-03 22:01:12,302 [pyrlang] gevent_engine:113: Listening on ('0.0.0.0', 0) (49806)
2018-11-03 22:01:12,302 [pyrlang.dist] distribution:58: Listening for dist connections on port 49806
...
#+END_SRC

There is a lot of logs generated, but it doesn't look very impressive, so let's
check couple of things...

** What's happened

Firstly, in separate shell, let's check registered nodes in ~epmd~:

#+BEGIN_SRC sh
$ epmd -names
epmd: up and running on port 4369 with data:
name py at port 49806
name ex at port 49466
#+END_SRC

We can see that there are both nodes - ~ex~ node we started first, and ~py~
shortly after. Next, let's check back our ~ex~ node. If everything went well, we
should have a message from ~py~ node.

#+BEGIN_SRC elixir
iex(ex@127.0.0.1)2> flush()
:"Hello from Python!"
:ok
#+END_SRC

And the message indeed is here!

Unfortunately, out of the box, ~Pyrlang~ doesn't implement whole functionality,
and this won't work:

#+BEGIN_SRC elixir
iex(ex@127.0.0.1)3> Node.ping(:"py@127.0.0.1")
:pang
#+END_SRC

However, if we monitor the node:

#+BEGIN_SRC elixir
iex(ex@127.0.0.1)4> Node.monitor(:"py@127.0.0.1", true)
true
#+END_SRC

and once we kill Python's node (hit CTRL-c), we will be able to see this:

#+BEGIN_SRC elixir
iex(ex@127.0.0.1)5> flush()
{:nodedown, :"py@127.0.0.1"}
:ok
#+END_SRC

Perfect - this should be just enough for our future needs.

The code is available [[https://github.com/pdawczak/PyEx_Project][here]].
